import React from "react";

const validEmailRegex = RegExp(
  /^(([^<>()\[\]\.,;:\s@\"]+(\.[^<>()\[\]\.,;:\s@\"]+)*)|(\".+\"))@(([^<>()[\]\.,;:\s@\"]+\.)+[^<>()[\]\.,;:\s@\"]{2,})$/i
);

const validateForm = (errors) => {
  let valid = true;
  Object.values(errors).forEach((val) => val.length > 0 && (valid = false));
  return valid;
};

export default class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      fullName: null,
      email: null,
      password: null,
      errors: {
        fullName: "",
        email: "",
        password: "",
      },
    };
  }

  handleChange = (event) => {
    event.preventDefault();
    const { name, value } = event.target;
    let errors = this.state.errors;

    switch (name) {
      case "fullName":
        errors.fullName =
          value.length < 5
            ? "Full Name must be at least 5 characters long!"
            : "";
        break;
      case "email":
        errors.email = validEmailRegex.test(value) ? "" : "Email is not valid!";
        break;
      case "password":
        errors.password =
          value.length < 8
            ? "Password must be at least 8 characters long!"
            : "";
        break;
      default:
        break;
    }

    this.setState({ errors, [name]: value });
  };

  //   handleSubmit = (event) => {
  //     event.preventDefault();
  //     if (validateForm(this.state.errors)) {
  //       console.info("Valid Form");
  //     } else {
  //       console.error("Invalid Form");
  //     }
  //   };

  render() {
    const { errors } = this.state;
    return (
      <div className="wrapper">
        <div className="form-wrapper">
          <h2>Create Account</h2>
          <form onSubmit={this.handleSubmit} noValidate>
            <div className="fullName">
              <label htmlFor="fullName">Full Name</label>
              <input
                type="text"
                name="fullName"
                onChange={this.handleChange}
                noValidate
              />
              {errors.fullName.length > 0 && (
                <span className="error">{errors.fullName}</span>
              )}
            </div>

            <div className="email">
              <label htmlFor="email">Email</label>
              <input
                type="email"
                name="email"
                onChange={this.handleChange}
                noValidate
              />
              {errors.email.length > 0 && (
                <span className="error">{errors.email}</span>
              )}
            </div>
            <div className="password">
              <label htmlFor="password">Password</label>
              <input
                type="password"
                name="password"
                onChange={this.handleChange}
                noValidate
              />
              {errors.password.length > 0 && (
                <span className="error">{errors.password}</span>
              )}
            </div>
            <div className="submit">
              <button>Create</button>
            </div>
          </form>
        </div>
      </div>
    );
  }
}


import React, { useState, useEffect, useRef } from "react";
import Select from "react-select";
import { Button, Col, Form, Row } from "react-bootstrap";
import DatePicker from "react-datepicker2";
import { DateTimeInput } from "react-hichestan-datetimepicker";
import {
  addStartDate,
  addEndDate,
  addDescreption,
  selectDescreption,
  selectStartDate,
  selectOverTimeReason,
  selectOverTimeReasonValue,
  addOverTimeReasonValue,
  selectEndDate,
  postOverTimeApi,
  selectFormErrors,
  addFormErrors,
} from "../../slices/OverTimeSlice";
import { useDispatch, useSelector } from "react-redux";

const OverTimeForm = () => {
  const dispatch = useDispatch();
  const overTimeReasons = useSelector(selectOverTimeReason);
  const des = useSelector(selectDescreption);
  const startDate = useSelector(selectStartDate);
  const endDate = useSelector(selectEndDate);
  const overTimeReasonValue = useSelector(selectOverTimeReasonValue);
  const formErrors = useSelector(selectFormErrors);
  const [isSubmit, setIsSubmit] = useState(false);

  const reasonInputRef = useRef();
  const startInputRef = useRef();
  const endInputRef = useRef();

  // const applyHandler = () => {
  //   setIsSubmit(true);
  //   if (overTimeReasons && startDate && endDate) {
  //     dispatch(postOverTimeApi());
  //     dispatch(addFormErrors(""));
  //     console.log(overTimeReasons.value);
  //     if (overTimeReasons.value == undefined) {
  //       dispatch(
  //         addFormErrors(
  //           validation({
  //             overTimeReasonValue: overTimeReasonValue.value,
  //             startDate: startDate,
  //             endDate: endDate,
  //           })
  //         )
  //       );
  //     }
  //   } else {
  //     dispatch(
  //       addFormErrors(
  //         validation({
  //           overTimeReasonValue: overTimeReasonValue.value,
  //           startDate: startDate,
  //           endDate: endDate,
  //         })
  //       )
  //     );
  //   }
  // };

  const clearHandler = () => {
    dispatch(addOverTimeReasonValue(""));
    dispatch(addStartDate(null));
    dispatch(addEndDate(null));
    dispatch(addDescreption(""));
    dispatch(addFormErrors(""));
  };

  // const validation = ({ overTimeReasonValue, startDate, endDate }) => {
  //   const errors = {};
  //   if (!overTimeReasonValue) {
  //     errors.overTimeReasonValue = "لطفا نوع اضافه کار را انتخاب نمایید!";
  //   }
  //   if (!startDate) {
  //     errors.startDate = "لطفا تاریخ و زمان شروع را مشخص نمایید!";
  //   }
  //   if (!endDate) {
  //     errors.endDate = "لطفا تاریخ و زمان پایان را مشخص نمایید!";
  //   }
  //   return errors;
  // };

  const reasonHandler = (e) => {
    dispatch(addOverTimeReasonValue(e));
    // applyHandler(e);
  };

  const startDateHandler = (e) => {
    dispatch(addStartDate(e));
    // dispatch(applyHandler(overTimeReasons, e, endDate));
  };

  useEffect(() => {
    function paternHandler() {
      if (Object.keys(formErrors).length === 0 && isSubmit) {
        return overTimeReasonValue && startDate && endDate;
      }
    }
    paternHandler();
  }, [formErrors]);

  const validateForm = (errors) => {
    let valid = true;
    Object.values(errors).forEach((val) => val.length > 0 && (valid = false));
    return valid;
  };

  const setHandlerForms = (event) => {
    const { name, value } = event;
    // const ref = event.current.props.name;
    // const reasonInputRef = reasonInputRef;
    const refrences = {
      selectReasonRef: reasonInputRef.current.props.name,
      selectStart: startInputRef.current.props.name,
      selectEndD: endInputRef.current.props.name,
    };

    console.log(reasonInputRef.current.props.name);
    console.log(reasonInputRef.current.props.name);
    console.log(reasonInputRef.current.props.name);
    console.log(value);

    // console.log(startInputRef);
    // console.log(endInputRef);
    switch (refrences) {
      case "reasonOverTime":
        dispatch(addOverTimeReasonValue(event));
        console.log(addOverTimeReasonValue(event));
        formErrors.reasonOverT =
          value.length < 0
            ? "Full Name must be at least 5 characters long!"
            : "";
        break;
      case "startD":
        dispatch(addStartDate(event));
        formErrors.startDT = value.length < 0 ? "" : "start Date is not valid!";
        break;
      case "endD":
        dispatch(addEndDate(event));
        formErrors.endDT =
          value.length < 4 ? "End Date be at least 8 characters long!" : "";
        break;
      default:
        break;
    }
    // dispatch(fields({ errors, [name]: value })); ////////////////////////////////////////////////////
  };

  const applyHandler = (event) => {
    event.preventDefault();
    if (validateForm(formErrors)) {
      console.info("Valid Form");
    } else {
      console.error("Invalid Form");
    }
  };

  return (
    <>
      <Form noValidate className="form-group">
        <Row>
          <Col className="mb-4" md="12" lg="6" xl="3">
            <Form.Label className="required-field form-label">
              نوع اضافه کار:
            </Form.Label>
            <Select
              ref={reasonInputRef}
              noValidate
              name="reasonOverTime"
              value={overTimeReasonValue}
              onChange={(e) => setHandlerForms(e)}
              options={overTimeReasons}
              placeholder="جستجو . . ."
              className={`${
                formErrors.overTimeReasonValue
                  ? "rounded mb-xl-0 border border-danger"
                  : "bg-none mb-xl-0"
              }`}
            />
            {formErrors.reasonOverT.length > 0 && (
              <span className="error">{formErrors.reasonOverT}</span>
            )}

            <p className="font12 text-danger mb-0 mt-1">
              {formErrors.overTimeReasonValue}
            </p>
          </Col>
          <Col className="mb-4" md="12" lg="6" xl="3">
            <Form.Label className="required-field mx-2 form-label">
              تاریخ و زمان شروع:
            </Form.Label>
            <DatePicker
              ref={startInputRef}
              noValidate
              name="startD"
              className={`${
                formErrors.startDate
                  ? "form-control mb-xl-0 border border-danger"
                  : "bg-none form-control mb-xl-0"
              }`}
              value={startDate}
              onChange={setHandlerForms}
              type="date"
              v-model="dateWhichShouldShow"
              inputFormat="YYYY-MM-DD"
              pick12HourFormat={false}
              isGregorian={false}
              timePicker={true}
              // className="form-control mb-xl-0"
            />
            <p className="font12 text-danger mt-1">
              {startDate && formErrors.startDate}
            </p>
          </Col>
          <Col className="mb-4" md="12" lg="6" xl="3">
            <Form.Label className="col-6 required-field col-lg-6 mx-2 form-label">
              تاریخ و زمان پایان:
            </Form.Label>
            <DatePicker
              ref={endInputRef}
              noValidate
              name="endD"
              onChange={setHandlerForms}
              value={endDate}
              type="date"
              v-model="dateWhichShouldShow"
              inputFormat="YYYY-MM-DD"
              pick12HourFormat={false}
              isGregorian={false}
              timePicker={true}
              // className="form-control col-12 col-sm-12 col-md-12 col-md-4"
              className={`${
                formErrors.endDate
                  ? "form-control mb-xl-0 border border-danger"
                  : "bg-none form-control mb-xl-0"
              }`}
            />
            <p className="font12 text-danger mb-0 mt-1">{formErrors.endDate}</p>
          </Col>
          <Col className="mb-4" md="12" lg="6" xl="12">
            <Form.Label className="mb-1 form-label"> توضیحات: </Form.Label>
            <Form.Control
              value={des}
              onChange={(e) => dispatch(addDescreption(e.target.value))}
              as="textarea"
              rows={4}
            />
          </Col>
          <div className="justify-content-center text-center ">
            <Button
              onClick={clearHandler}
              variant="secondary"
              className="col-sm-12 col-md-3 col-xl-2 me-4 my-1"
            >
              ایجاد مورد جدید
            </Button>
            <Button
              onClick={applyHandler}
              variant="success"
              className="col-sm-12 col-md-3 col-xl-1 text-center me-1 ms-xl-4 justify-content-center my-1"
            >
              ثبت
            </Button>
            <Button
              variant="primary"
              className="col-sm-12 col-md-3 col-xl-2 ms-xl-2 my-1"
            >
              ارسال به سرپرست / مدیر
            </Button>
          </div>
        </Row>
      </Form>
    </>
  );
};

export default OverTimeForm;

{
  /* <Form.Label className="col-2 mx-2 form-label">
  تاریخ تست:
  <DateTimeInput
    onChange={(e) => setStartDate(e.target.value)}
    value={startDate}
    className="form-control "
  />
</Form.Label> */
}
